{"version":3,"sources":["minesweeper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","width","height","mines","mineField","i","push","row","col","Math","floor","random","fieldsAround","filter","field","length","reduce","acc","current","Cell","props","type","onClick","onContextMenu","data-index","index","levels","App","state","board","time","finished","timer","getDiffTime","bind","handleClick","newGame","gameOver","changeLevel","this","won","setState","clearInterval","console","log","document","querySelector","classList","add","innerHTML","e","preventDefault","target","hasAttribute","value","dataset","nonbombs","revealEmpty","n","concat","num","arr","indexOf","forEach","el","querySelectorAll","includes","removeAttribute","setAttribute","parseInt","emptyFields","map","selected","options","selectedIndex","remove","Date","getTime","minesweeper","button","setInterval","a","diff","seconds","minutes","className","item","key","flag","id","name","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c8d56d9.chunk.js","sourcesContent":["module.exports = (width, height, mines) => {\n  const mineField = [];\n  for (let i = 0; i < width * height; i++) {\n    mineField.push(0);\n  }\n  //0 INDICATES THAT THERE IS NO MINE ON FIELD\n\n  // GENERATE MINES\n  for (let i = 0; i < mines; i++) {\n    let row, col;\n    // if item is already -1, x and y indexes are generated again\n    do {\n      row = Math.floor(Math.random() * width);\n      col = Math.floor(Math.random() * height);\n    } while (mineField[row*height + col] === -1);\n    // if it is 0, than it is changed to -1\n    mineField[row*height+col] = -1;\n  }\n  //-1 INDICATES THAT THERE IS MINE ON FIELD\n \n  // COUNTING MINES AROUND\n  for (let i = 0; i < width * height; i++) {\n    // fieldsAround of currently checked item\n    let col = (i % width);\n    let row = Math.floor(i / width);\n    // 0 INDICATES THAT THERE IS NO MINE ON THAT FIELD\n    if(mineField[row*width+col]===0){ \n      // COORDINATES OF EACH ELEMENT AROUND CURRENT FIELD\n      let fieldsAround = [[-1,-1],[0,-1],[1,-1],[-1,0],[1,0],[-1,1],[0,1],[1,1]]\n      // [-1,-1] [0,-1] [1,-1]\n      // [-1, 0] [ EL ] [1, 0]\n      // [-1, 1] [0, 1] [1, 1]\n      if(row===0){\n        //EXCLUDE UPPER ROW (WITH SECOND VALUE EQUAL TO -1)\n        fieldsAround = fieldsAround.filter(field=>{\n          return field[1]!==-1\n        })\n      }\n      if(row===Math.floor(mineField.length/width)-1){\n        //EXCLUDE LOWER ROW (WITH SECOND VALUE EQUAL TO 1)\n        fieldsAround = fieldsAround.filter(field=>{\n          return field[1]!==1\n        })\n      }\n      if(col===0){\n        //EXCLUDE LEFT COLUMN (WITH FIRST VALUE EQUAL TO -1)\n        fieldsAround = fieldsAround.filter(field=>{\n          return field[0]!==-1\n        })\n      }\n      if(col===Math.floor(mineField.length/height)-1){\n        //EXCLUDE RIGHT COLUMN (WITH FIRST VALUE EQUAL TO 1)\n        fieldsAround = fieldsAround.filter(field=>{\n          return field[0]!==1\n        })\n      }\n      // WE COUNT NEW VALUE BY CHECKING IF FIELDS AROUND HAVE MINE (IF THEY EQUAL TO -1 THEN WE INCREMENT THE COUNTER)\n      mineField[row*width+col] = fieldsAround.reduce((acc,current)=>mineField[ ( row + current[1] )* width + col + current[0] ] === -1 ? ++acc : acc, 0)\n    }\n\n  }\n  return mineField;\n};","import React from \"react\";\nimport \"./App.scss\";\nimport minesweeper from \"./minesweeper\";\n\nconst Cell = props => {\n  return (\n    <button\n      type=\"button\"\n      onClick={props.onClick}\n      onContextMenu={props.onClick}\n      data-index={props.index}\n    ></button>\n  );\n};\n\n\n\nconst levels = [\n  {width:10,height:10,mines:10},\n  {width:15,height:15,mines:30},\n  {width:20,height:20,mines:50},\n]\n\nexport default class App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      width: levels[0].width,\n      height: levels[0].height,\n      mines: levels[0].mines,\n      board: [],\n      time:0,\n      finished: false\n    };\n\n    this.timer = 0;\n    this.getDiffTime = this.getDiffTime.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.newGame = this.newGame.bind(this);\n    this.gameOver = this.gameOver.bind(this);\n    this.changeLevel = this.changeLevel.bind(this);\n  }\n\n  componentDidMount(){\n    //START NEW GAME ON LOADING\n    this.newGame()\n  }\n\n  gameOver(won){\n    this.setState({...this.state, finished:true})\n    clearInterval(this.timer);\n    if(!won){\n      console.log(\"Game over\",`Your time is ${this.getDiffTime()}`);\n      document.querySelector(\".lost\").classList.add(\"visible\");\n    } else{\n      console.log(\"You have won\",`Your time is ${this.getDiffTime()}`);\n      document.querySelector(\".win\").classList.add(\"visible\");\n      document.querySelector(\".win span\").innerHTML = this.getDiffTime();\n    }\n    \n  }\n\n  handleClick(e) {\n    e.preventDefault();\n\n    if(this.state.finished){\n      console.log(\"Game has already finished\");\n      return;\n    }\n\n    //HANDLE LEFT CLICK\n    if(e.type===\"click\"){\n      //HANDLE ONLY FIELDS WITHOUT FLAG\n      if(!e.target.hasAttribute(\"flag\")){\n        let value = this.state.board[e.target.dataset.index]\n\n        if(value===-1){\n\n          //BOMB CLICKED, GAME OVER\n          e.target.classList.add(\"bomb\");\n          this.gameOver(false);\n\n        } if(value>=0){\n          //NON BOMB CLICKED\n          e.target.classList.add(\"good\");\n          if(value===0){\n            //REVEAL ALL NON BOMB FIELDS AROUND\n            let nonbombs = this.revealEmpty(e.target.dataset.index);\n            for(let i = 0; i < nonbombs.length; i++){\n              //IF FIELD IS EMPTY, REVEAL OTHERS AROUND IT\n              if(this.state.board[nonbombs[i]]===0){\n                let n = this.revealEmpty(nonbombs[i]);\n                nonbombs = nonbombs.concat(n);\n                //REMOVE DUPLICATES\n                nonbombs = nonbombs.filter((num,index,arr)=>arr.indexOf(num)===index)\n              }\n            }\n            nonbombs.forEach((el)=>{\n              document.querySelector(`.board button[data-index='${el}']`).classList.add(\"good\");\n              document.querySelector(`.board button[data-index='${el}']`).innerHTML = this.state.board[el]===0 ? \"\" : this.state.board[el];\n            })\n          } else{\n            e.target.innerHTML = value\n          }\n        } \n      }\n\n      //CHECK IF WON\n      if(document.querySelectorAll(\".board button[class='good']\").length === this.state.height * this.state.width - this.state.mines){\n        this.gameOver(true);\n      }\n\n    } else if(e.type===\"contextmenu\"){\n      // HANDLE RIGHT CLICK\n      if(!e.target.hasAttribute(\"flag\") && ![...e.target.classList].includes(\"good\")){\n        e.target.setAttribute(\"flag\",\"\") //SET FLAG\n      } else {\n        e.target.removeAttribute(\"flag\"); //REMOVE FLAG\n      }\n    }\n  }\n\n  \n\n  revealEmpty(index){\n    const row = Math.floor(index / this.state.height);\n    const col = index % this.state.width;\n    index = parseInt(index,10);\n\n    let emptyFields = [[-1,-1],[0,-1],[1,-1],[-1,0],[1,0],[-1,1],[0,1],[1,1]]\n    if(row===0){\n      emptyFields = emptyFields.filter(field=>{\n        return field[1]!==-1\n      })\n    }\n    if(row===this.state.height-1){\n      emptyFields = emptyFields.filter(field=>{\n        return field[1]!==1\n      })\n    }\n    if(col===0){\n      emptyFields = emptyFields.filter(field=>{\n        return field[0]!==-1\n      })\n    }\n    if(col===this.state.width-1){\n      emptyFields = emptyFields.filter(field=>{\n        return field[0]!==1\n      })\n    }\n\n    \n    return emptyFields\n    .map(current=>( row + current[1] )* this.state.width + col + current[0])\n    .filter(current=>this.state.board[current]!==-1)\n    .filter(current=>![...document.querySelector(`.board button[data-index='${current}']`).classList].includes(\"good\"))\n\n  }\n\n  changeLevel(e){\n    const selected = e.target.options.selectedIndex;\n    //UPDATING STATE WITH CURRENTLY CHOSEN LEVEL\n    this.setState({\n      ...this.state,\n      width: levels[selected].width,\n      height: levels[selected].height,\n      mines: levels[selected].mines\n    })\n  }\n\n  newGame(){\n    [...document.querySelectorAll(\".messages div\")].forEach(el=>el.classList.remove(\"visible\"));\n    //SET NEW WIDTH OF ROW\n    document.querySelector(\".board\").setAttribute(\"style\",`--col:${this.state.width}`)\n    //GENERATING NEW BOARD WITH VALUES FROM STATE\n    this.setState({\n      ...this.state,\n      finished:false,\n      time:new Date().getTime(),\n      board: minesweeper(this.state.width, this.state.height, this.state.mines)\n    });\n    //RESET ALL THE BUTTONS\n    [...document.querySelectorAll(\".board button\")].map(button=>{\n      button.classList.remove(...button.classList);\n      button.innerHTML = \"\";\n      button.removeAttribute(\"flag\");\n      return button;\n    });\n\n    this.timer = setInterval(async ()=>{\n      document.querySelector(\"#timer span\").innerHTML = this.getDiffTime();\n    },1000)\n    \n  }\n\n  getDiffTime(){\n    const diff = Math.floor((new Date().getTime() - this.state.time) / 1000);\n    const seconds = diff % 60 < 10 ? \"0\"+diff%60 : diff % 60;\n    const minutes = Math.floor(diff / 60) < 10 ? \"0\"+Math.floor(diff/60) : Math.floor(diff / 60);\n    return `${minutes}:${seconds}`;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"messages\">\n          <div className=\"win\">Congratulation you have won!<br/>Your time is <span>00:00</span></div>\n          <div className=\"lost\">You have lost!</div>\n        </div>\n        \n        <div className=\"board\">\n          {this.state.board.map((item,index)=>{\n            return <Cell key={index} onClick={this.handleClick} index={index} flag></Cell>\n          })}\n        </div>\n\n        <div className=\"menu\">\n          <p id=\"timer\">Time<span>00:00</span></p>\n          <select name=\"\" id=\"\" onChange={this.changeLevel}>\n            <option value=\"1\">EASY (10x10 / 10 mines)</option>\n            <option value=\"2\">MEDIUM (15x15 / 30 mines)</option>\n            <option value=\"3\">HARD (20x20 / 50 mines)</option>\n          </select>\n          <button onClick={this.newGame}>Reset</button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}